import {
  dist_exports,
  init_dist
} from "./chunk-AREF2OEM.js";
import {
  require_aria,
  require_aria2,
  require_constants,
  require_core,
  require_types,
  require_utils,
  require_vue
} from "./chunk-MMJPAREY.js";
import "./chunk-PARLYUU7.js";
import {
  __commonJS,
  __toCommonJS
} from "./chunk-S5KM4IGW.js";

// node_modules/element-plus/lib/directives/click-outside/index.js
var require_click_outside = __commonJS({
  "node_modules/element-plus/lib/directives/click-outside/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var core = require_core();
    require_utils();
    var types = require_types();
    var nodeList = /* @__PURE__ */ new Map();
    var startClick;
    if (core.isClient) {
      document.addEventListener("mousedown", (e) => startClick = e);
      document.addEventListener("mouseup", (e) => {
        for (const handlers of nodeList.values()) {
          for (const { documentHandler } of handlers) {
            documentHandler(e, startClick);
          }
        }
      });
    }
    function createDocumentHandler(el, binding) {
      let excludes = [];
      if (Array.isArray(binding.arg)) {
        excludes = binding.arg;
      } else if (types.isElement(binding.arg)) {
        excludes.push(binding.arg);
      }
      return function(mouseup, mousedown) {
        const popperRef = binding.instance.popperRef;
        const mouseUpTarget = mouseup.target;
        const mouseDownTarget = mousedown == null ? void 0 : mousedown.target;
        const isBound = !binding || !binding.instance;
        const isTargetExists = !mouseUpTarget || !mouseDownTarget;
        const isContainedByEl = el.contains(mouseUpTarget) || el.contains(mouseDownTarget);
        const isSelf = el === mouseUpTarget;
        const isTargetExcluded = excludes.length && excludes.some((item) => item == null ? void 0 : item.contains(mouseUpTarget)) || excludes.length && excludes.includes(mouseDownTarget);
        const isContainedByPopper = popperRef && (popperRef.contains(mouseUpTarget) || popperRef.contains(mouseDownTarget));
        if (isBound || isTargetExists || isContainedByEl || isSelf || isTargetExcluded || isContainedByPopper) {
          return;
        }
        binding.value(mouseup, mousedown);
      };
    }
    var ClickOutside = {
      beforeMount(el, binding) {
        if (!nodeList.has(el)) {
          nodeList.set(el, []);
        }
        nodeList.get(el).push({
          documentHandler: createDocumentHandler(el, binding),
          bindingFn: binding.value
        });
      },
      updated(el, binding) {
        if (!nodeList.has(el)) {
          nodeList.set(el, []);
        }
        const handlers = nodeList.get(el);
        const oldHandlerIndex = handlers.findIndex((item) => item.bindingFn === binding.oldValue);
        const newHandler = {
          documentHandler: createDocumentHandler(el, binding),
          bindingFn: binding.value
        };
        if (oldHandlerIndex >= 0) {
          handlers.splice(oldHandlerIndex, 1, newHandler);
        } else {
          handlers.push(newHandler);
        }
      },
      unmounted(el) {
        nodeList.delete(el);
      }
    };
    exports["default"] = ClickOutside;
  }
});

// node_modules/element-plus/lib/directives/repeat-click/index.js
var require_repeat_click = __commonJS({
  "node_modules/element-plus/lib/directives/repeat-click/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var REPEAT_INTERVAL = 100;
    var REPEAT_DELAY = 600;
    var RepeatClick = {
      beforeMount(el, binding) {
        let interval = null;
        let delay = null;
        const handler = () => binding.value && binding.value();
        const clear = () => {
          if (delay) {
            clearTimeout(delay);
            delay = null;
          }
          if (interval) {
            clearInterval(interval);
            interval = null;
          }
        };
        el.addEventListener("mousedown", (e) => {
          if (e.button !== 0)
            return;
          handler();
          document.addEventListener("mouseup", clear, { once: true });
          clear();
          delay = setTimeout(() => {
            interval = setInterval(() => {
              handler();
            }, REPEAT_INTERVAL);
          }, REPEAT_DELAY);
        });
      }
    };
    exports.REPEAT_DELAY = REPEAT_DELAY;
    exports.REPEAT_INTERVAL = REPEAT_INTERVAL;
    exports["default"] = RepeatClick;
  }
});

// node_modules/element-plus/lib/directives/trap-focus/index.js
var require_trap_focus = __commonJS({
  "node_modules/element-plus/lib/directives/trap-focus/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var vue = require_vue();
    require_utils();
    require_constants();
    var aria = require_aria2();
    var aria$1 = require_aria();
    var FOCUSABLE_CHILDREN = "_trap-focus-children";
    var TRAP_FOCUS_HANDLER = "_trap-focus-handler";
    var FOCUS_STACK = [];
    var FOCUS_HANDLER = (e) => {
      var _a;
      if (FOCUS_STACK.length === 0)
        return;
      const focusableElement = FOCUS_STACK[FOCUS_STACK.length - 1][FOCUSABLE_CHILDREN];
      if (focusableElement.length > 0 && e.code === aria.EVENT_CODE.tab) {
        if (focusableElement.length === 1) {
          e.preventDefault();
          if (document.activeElement !== focusableElement[0]) {
            focusableElement[0].focus();
          }
          return;
        }
        const goingBackward = e.shiftKey;
        const isFirst = e.target === focusableElement[0];
        const isLast = e.target === focusableElement[focusableElement.length - 1];
        if (isFirst && goingBackward) {
          e.preventDefault();
          focusableElement[focusableElement.length - 1].focus();
        }
        if (isLast && !goingBackward) {
          e.preventDefault();
          focusableElement[0].focus();
        }
        if (false) {
          const index = focusableElement.indexOf(e.target);
          if (index !== -1) {
            (_a = focusableElement[goingBackward ? index - 1 : index + 1]) == null ? void 0 : _a.focus();
          }
        }
      }
    };
    var TrapFocus = {
      beforeMount(el) {
        el[FOCUSABLE_CHILDREN] = aria$1.obtainAllFocusableElements(el);
        FOCUS_STACK.push(el);
        if (FOCUS_STACK.length <= 1) {
          document.addEventListener("keydown", FOCUS_HANDLER);
        }
      },
      updated(el) {
        vue.nextTick(() => {
          el[FOCUSABLE_CHILDREN] = aria$1.obtainAllFocusableElements(el);
        });
      },
      unmounted() {
        FOCUS_STACK.shift();
        if (FOCUS_STACK.length === 0) {
          document.removeEventListener("keydown", FOCUS_HANDLER);
        }
      }
    };
    exports.FOCUSABLE_CHILDREN = FOCUSABLE_CHILDREN;
    exports.TRAP_FOCUS_HANDLER = TRAP_FOCUS_HANDLER;
    exports["default"] = TrapFocus;
  }
});

// node_modules/element-plus/lib/directives/mousewheel/index.js
var require_mousewheel = __commonJS({
  "node_modules/element-plus/lib/directives/mousewheel/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var normalizeWheel = (init_dist(), __toCommonJS(dist_exports));
    function _interopDefaultLegacy(e) {
      return e && typeof e === "object" && "default" in e ? e : { "default": e };
    }
    var normalizeWheel__default = _interopDefaultLegacy(normalizeWheel);
    var mousewheel = function(element, callback) {
      if (element && element.addEventListener) {
        const fn = function(event) {
          const normalized = normalizeWheel__default["default"](event);
          callback && Reflect.apply(callback, this, [event, normalized]);
        };
        element.addEventListener("wheel", fn, { passive: true });
      }
    };
    var Mousewheel = {
      beforeMount(el, binding) {
        mousewheel(el, binding.value);
      }
    };
    exports["default"] = Mousewheel;
  }
});

// node_modules/element-plus/lib/directives/index.js
var require_directives = __commonJS({
  "node_modules/element-plus/lib/directives/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var index = require_click_outside();
    var index$1 = require_repeat_click();
    var index$2 = require_trap_focus();
    var index$3 = require_mousewheel();
    exports.ClickOutside = index["default"];
    exports.RepeatClick = index$1["default"];
    exports.TrapFocus = index$2["default"];
    exports.Mousewheel = index$3["default"];
  }
});

// dep:element-plus_lib_directives_index
var element_plus_lib_directives_index_default = require_directives();
export {
  element_plus_lib_directives_index_default as default
};
//# sourceMappingURL=element-plus_lib_directives_index.js.map
